// Generated by gencpp from file mavros/Control_Refs.msg
// DO NOT EDIT!


#ifndef MAVROS_MESSAGE_CONTROL_REFS_H
#define MAVROS_MESSAGE_CONTROL_REFS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros
{
template <class ContainerAllocator>
struct Control_Refs_
{
  typedef Control_Refs_<ContainerAllocator> Type;

  Control_Refs_()
    : theta(0.0)
    , phi(0.0)
    , psi(0.0)
    , thrust(0.0)  {
    }
  Control_Refs_(const ContainerAllocator& _alloc)
    : theta(0.0)
    , phi(0.0)
    , psi(0.0)
    , thrust(0.0)  {
    }



   typedef float _theta_type;
  _theta_type theta;

   typedef float _phi_type;
  _phi_type phi;

   typedef float _psi_type;
  _psi_type psi;

   typedef float _thrust_type;
  _thrust_type thrust;




  typedef boost::shared_ptr< ::mavros::Control_Refs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros::Control_Refs_<ContainerAllocator> const> ConstPtr;

}; // struct Control_Refs_

typedef ::mavros::Control_Refs_<std::allocator<void> > Control_Refs;

typedef boost::shared_ptr< ::mavros::Control_Refs > Control_RefsPtr;
typedef boost::shared_ptr< ::mavros::Control_Refs const> Control_RefsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros::Control_Refs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros::Control_Refs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'mavros': ['/home/chengque/catkin_ws/src/mavros_pkg/mavros/msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'diagnostic_msgs': ['/opt/ros/jade/share/diagnostic_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavros::Control_Refs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros::Control_Refs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros::Control_Refs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros::Control_Refs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros::Control_Refs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros::Control_Refs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros::Control_Refs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21f7f291a693523bde2376aa0274264b";
  }

  static const char* value(const ::mavros::Control_Refs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21f7f291a693523bULL;
  static const uint64_t static_value2 = 0xde2376aa0274264bULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros::Control_Refs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros/Control_Refs";
  }

  static const char* value(const ::mavros::Control_Refs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros::Control_Refs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 theta\n\
float32 phi\n\
float32 psi\n\
float32 thrust\n\
";
  }

  static const char* value(const ::mavros::Control_Refs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros::Control_Refs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta);
      stream.next(m.phi);
      stream.next(m.psi);
      stream.next(m.thrust);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Control_Refs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros::Control_Refs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros::Control_Refs_<ContainerAllocator>& v)
  {
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
    s << indent << "psi: ";
    Printer<float>::stream(s, indent + "  ", v.psi);
    s << indent << "thrust: ";
    Printer<float>::stream(s, indent + "  ", v.thrust);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MESSAGE_CONTROL_REFS_H
